apply plugin: 'com.android.application'
apply plugin: 'kotlin-multiplatform'
apply from: 'version.gradle'
apply from: '../project.gradle'

println "do singing: " + doSigning
if (doSigning) {
    apply from: 'signing.gradle'
}

dependencies {
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support:design:28.0.0'
    implementation project(':tree-view-list-android')

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.0'
    implementation project(":nativeLibs:djvuModule")
    implementation project(":nativeLibs:mupdfModule")

    androidTestImplementation 'androidx.test:core:1.2.0'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test:rules:1.2.0'


    //MPP test workaround
    implementation project(":common")
}

android {
    compileSdkVersion orionCompileSdk
    buildToolsVersion orionBuildToolsVersion

    defaultConfig {
        versionCode = orionVersionCode
        versionName = orionVersionName

        minSdkVersion orionMinSdk
        targetSdkVersion orionTargetSdk


        applicationId "universe.constellation.orion.viewer"
        testApplicationId "universe.constellation.orion.viewer.test"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        archivesBaseName = "orion-viewer-$versionName"
    }

    sourceSets {
        main {
            assets.srcDirs = ['assets']
            //java.srcDirs += '../common/src/main/kotlin'
            if (excludeNativeLibsSources) {
                jniLibs.srcDirs = [mupdf_libs, djvu_libs]
            }
            java {
                srcDirs += "../nativeLibs/mupdf/platform/java/src"

                if (onyxSdkPath != null) {
                    srcDirs += onyxSdkPath + "/src/main/java/"
                }
            }

        }

        //test
        androidTest {
            java.srcDirs += 'src/androidTest/kotlin'
            resources.srcDirs += 'src/androidTest/assets'
        }
    }

    buildTypes {
        release {
            applicationVariants.all { variant ->
                variant.outputs.each { output ->
                    if (variant.name == "release") {
                        outputFileName = "orion-viewer--${variant.version}-${variant.name}.apk"
                    }
                }
            }

            if (doSigning) {
                signingConfig signingConfigs.release
            }
        }
    }

    flavorDimensions "arch"

    productFlavors {
//        arm5 {
//            versionCode = 1
//            ndk {
//                abiFilter "armeabi"
//            }
//            dimension "arch"
//        }
        arm7 {
            versionCode = 1
            ndk {
                abiFilter "armeabi-v7a"
            }
            dimension "arch"
        }

        arm64 {
            versionCode = 2
            ndk {
                abiFilter "arm64-v8a"
            }
            dimension "arch"
        }
        x86 {
            versionCode = 3
            ndk {
                abiFilter "x86"
            }
            dimension "arch"
        }
        x86_64 {
            versionCode = 4
            ndk {
                abiFilter "x86_64"
            }
            dimension "arch"
        }
//        mips {
//            versionCode = 4
//            ndk {
//                abiFilter "mips"
//            }
//            dimension "arch"
//        }
    }

    // make per-variant version code
    applicationVariants.all { variant ->
        // get the version code of each flavor
        def abiVersion = variant.productFlavors.get(0).versionCode

        // set the composite code
        variant.outputs.each { output ->
            output.versionCodeOverride = abiVersion + defaultConfig.versionCode - 1
        }

        println "New version code for " + variant.productFlavors.name + " is " + variant.mergedFlavor.versionCode
    }

    lintOptions { abortOnError false }

    packagingOptions {
        exclude 'META-INF/main.kotlin_module'
    }
}

kotlin {
    sourceSets {
        commonMain {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-stdlib-common'
                implementation project(":common")
            }
        }

//        linuxAppMain {
//            dependencies {
//                implementation 'org.jetbrains.kotlin:kotlin-stdlib-native'
//            }
//
//            kotlin.srcDir('../native/src/main')
//        }

    }

    targets {
        fromPreset(presets.android, 'androidApp') {

        }
//        fromPreset(presets.linuxX64, 'linuxApp') {
//            compilations.main {
//                cinterops {
//                    interopName {
//                         defFile "../native/src/main/c_interop/gtk3.def"
//                    }
//                }
//            }
//        }
    }
}